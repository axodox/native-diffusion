namespace Unpaint
{
  interface INavigationService
  {
    void NavigateToView(Windows.UI.Xaml.Interop.TypeName viewType);

    Boolean IsPointerOverTitleBar{ get; };
    event Windows.Foundation.EventHandler<Boolean> IsPointerOverTitleBarChanged;
  };

  [default_interface]
  runtimeclass ShowcaseViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    ShowcaseViewModel();

    IObservableVector<String> Images{ get; };
    Int32 ImageCount{ get; };
    Int32 SelectedImageIndex;
    String Prompt{ get; };

    void Continue();
  };

  struct ModelViewModel
  {
    String Id;
    String Name;
    String Uri;
  };

  [default_interface]
  runtimeclass ModelsViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    ModelsViewModel();

    void ImportModelFromHuggingFaceAsync();
    void ImportModelFromDiskAsync();

    IObservableVector<ModelViewModel> InstalledModels{ get; };
    Boolean AreInstalledModelsEmpty{ get; };
        
    Int32 SelectedInstalledModel;
    Boolean IsInstalledModelSelected{ get; };
    Boolean IsModelWebsiteAvailable{ get; };

    void OpenModelDirectory();
    void OpenInstalledModelWebsite();
    void CopyLinkToClipboard();
    void RemoveModelAsync();

    Boolean CanContinue{ get; };
    void Continue();

    void OpenUri(Windows.Foundation.Uri uri);
    void OpenControlNetSettingsAsync();
  }

  [default_interface]
  runtimeclass DownloadModelViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    DownloadModelViewModel();

    void DownloadStableDiffusionModelAsync(String modelId);
    void EnsureControlNetModelsAsync(IVector<String> modeIds);

    Double Progress{ get; };
    String StatusMessage{ get; };

    Boolean IsInProgress{ get; };
    Boolean IsFinished{ get; };

    void Cancel();
  }

  [default_interface]
  runtimeclass InferenceViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    InferenceViewModel();

    ProjectViewModel Project{ get; };

    Int32 SelectedModeIndex;

    Boolean IsSettingsLocked;
    Boolean IsJumpingToLatestImage;
        
    Single DenoisingStrength;

    String Status{ get; };
    Single Progress{ get; };
        
    Windows.Storage.StorageFile InputImage;
    Windows.Graphics.Imaging.BitmapSize InputResolution{ get; };
    Windows.Graphics.Imaging.SoftwareBitmap InputMask;

    Boolean IsAutoGenerationEnabled{ get; };
    Boolean HasSafetyCheckFailed{ get; };

    void GenerateImage();
    void OpenSettings();

    void UseCurrentImageAsInput();
    void CopyPromptLink();
    void OpenUri(Windows.Foundation.Uri uri);
  }

  struct AdapterViewModel
  {
    String Name;
    UInt32 Index;
  };

  [default_interface]
  runtimeclass SettingsViewModel
  {
    SettingsViewModel();
    
    Boolean AreUnsafeOptionsEnabled{ get; };

    Boolean IsSafeModeEnabled;
    Boolean IsSafetyCheckerEnabled;
    Boolean IsDenoiserPinned;

    String Version{ get; };

    IObservableVector<AdapterViewModel> Adapters{ get; };
    Int32 SelectedAdapterIndex;

    void Continue();
  }

  [default_interface]
  runtimeclass ImportHuggingFaceModelViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    ImportHuggingFaceModelViewModel();

    String ModelId;
    Boolean IsValid{ get; };
    String Status{ get; };
  }

  [default_interface]
  runtimeclass ImportLocalModelViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    ImportLocalModelViewModel();

    String ModelPath{ get; };
    Boolean IsValid{ get; };
    String Status{ get; };

    Windows.Storage.StorageFolder Result{ get; };

    void BrowseModelAsync();
  }

  [default_interface]
  runtimeclass InferenceOptionsViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    InferenceOptionsViewModel();

    IObservableVector<ModelViewModel> Models{ get; };
    Int32 SelectedModelIndex;

    IObservableVector<Windows.Graphics.SizeInt32> Resolutions{ get; };
    Int32 SelectedResolutionIndex;

    Boolean IsBatchGenerationEnabled;
    UInt32 BatchSize;

    Single GuidanceStrength;
    UInt32 SamplingSteps;
    UInt32 RandomSeed;
    Boolean IsSeedFrozen;

    void ManageModels();
  }

  [default_interface]
  runtimeclass PromptEditorViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    PromptEditorViewModel();

    String PositivePrompt;
    String PositivePromptPlaceholder{ get; };
    Int32 AvailablePositiveTokenCount{ get; };

    String NegativePrompt;
    String NegativePromptPlaceholder{ get; };
    Int32 AvailableNegativeTokenCount{ get; };
  }

  [default_interface]
  runtimeclass ProjectViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    ProjectViewModel();

    IObservableVector<String> Projects{ get; };
    Int32 SelectedProjectIndex;
    Boolean CanDeleteProject{ get; };

    void CreateNewProject();
    void OpenProjectDirectory();
    void DeleteProject();

    IObservableVector<String> Images{ get; };

    Int32 SelectedImageIndex;
    Boolean HasImageSelected{ get; };
    Windows.Storage.StorageFile SelectedImage{ get; };
    String ImagePosition{ get; };

    void AddImage(Windows.Storage.StorageFile file);
    void LoadSettingsFromCurrentImage();
    void CopyToClipboard();
    void SaveImageAs();
    void DeleteImage();    
  }

  struct ControlNetModeViewModel
  {
    String Id;
    String Name;
    String Description;
    String ExampleInput;
    String ExampleOutput;
  };

  [default_interface]
  runtimeclass ControlNetModelsViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    ControlNetModelsViewModel();

    IObservableVector<ControlNetModeViewModel> Modes{ get; };

    IVector<String> SelectedModes;

    Boolean IsSelected(String modeId);
    void IsSelected(String modeId, Boolean value);
  }
}