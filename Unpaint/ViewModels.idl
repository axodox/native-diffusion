namespace Unpaint
{
  interface INavigationService
  {
    void NavigateToView(Windows.UI.Xaml.Interop.TypeName viewType);

    Boolean IsPointerOverTitleBar{ get; };
    event Windows.Foundation.EventHandler<Boolean> IsPointerOverTitleBarChanged;
  };

  struct ModelViewModel
  {
    String Id;
    String Uri;
  };

  [default_interface]
  runtimeclass ModelsViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    ModelsViewModel();

    IObservableVector<ModelViewModel> AvailableModels{ get; };
    Boolean AreAvailableModelsEmpty{ get; };
    void UpdateAvailableModelsAsync();
    void OpenAvailableModelWebsite();
    void DownloadModelAsync();

    Int32 SelectedAvailableModel;
    Boolean IsAvailableModelSelected{ get; };
    
    IObservableVector<ModelViewModel> InstalledModels{ get; };
    Boolean AreInstalledModelsEmpty{ get; };
    void OpenInstalledModelWebsite();
    void RemoveModelAsync();

    Int32 SelectedInstalledModel;
    Boolean IsInstalledModelSelected{ get; };

    Boolean CanContinue{ get; };
    void Continue();
  }

  [default_interface]
  runtimeclass DownloadModelViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    DownloadModelViewModel(String modelId);

    Double Progress{ get; };
    String StatusMessage{ get; };

    Boolean IsInProgress{ get; };
    Boolean IsFinished{ get; };

    void Cancel();
  }

  [default_interface]
  runtimeclass InferenceViewModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
  {
    InferenceViewModel();

    String PositivePrompt;
    String PositivePromptPlaceholder{ get; };

    String NegativePrompt;
    String NegativePromptPlaceholder{ get; };

    IObservableVector<String> Models{ get; };
    Int32 SelectedModelIndex;

    IObservableVector<Windows.Graphics.SizeInt32> Resolutions{ get; };
    Int32 SelectedResolutionIndex;

    Single GuidanceStrength;
    Single DenoisingStrength;
    UInt32 SamplingSteps;
    UInt32 RandomSeed;
    Boolean IsSeedFrozen;

    String Status{ get; };
    Single Progress{ get; };

    IObservableVector<String> Images{ get; };
    Boolean HasImageSelected{ get; };
    Int32 SelectedImageIndex;
    String ImagePosition{ get; };
    
    Windows.UI.Xaml.Media.ImageSource OutputImage{ get; };

    IObservableVector<String> Projects{ get; };
    Int32 SelectedProjectIndex;
    Boolean CanDeleteProject{ get; };

    void GenerateImage();
    void ManageModels();
    void OpenSettings();

    void CopyToClipboard();
    void SaveImageAs();
    void DeleteImage();
    void ShowImageDirectory();
    void CreateNewProject();
    void DeleteProject();
  }

  [default_interface]
  runtimeclass SettingsViewModel
  {
    SettingsViewModel();
    
    Boolean IsSafeModeEnabled;
    Boolean IsDenoiserPinned;

    void Continue();
  }
}